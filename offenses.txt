Inspecting 35 files
WWCCCCWCCCWWWWWWCCCCCCCCCCCCCCCCCCC

Offenses:

app.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require './models/init.rb'
^
app.rb:1:23: C: [Correctable] Style/RedundantFileExtensionInRequire: Redundant .rb file extension detected.
require './models/init.rb'
                      ^^^
app.rb:3:1: C: Style/Documentation: Missing top-level documentation comment for class App.
class App < Sinatra::Base
^^^^^^^^^
app.rb:7:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    if !params[:rejected].nil?
    ^^
app.rb:7:5: C: [Correctable] Style/NegatedIf: Favor unless over if for negative conditions.
    if !params[:rejected].nil? ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:14:8: C: [Correctable] Style/ParenthesesAroundCondition: Don't use parentheses around the condition of an if.
    if (Career.empty?)
       ^^^^^^^^^^^^^^^
app.rb:14:8: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
    if (Career.empty?)
       ^^^^^^^^^^^^^^^
app.rb:27:5: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
    if Survey.find(username: params[:username]).exist?
    ^^
app.rb:28:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
    	redirect '/?rejected=true'
^^^^^
app.rb:28:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
    	redirect '/?rejected=true'
    ^
app.rb:43:26: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
  get '/questions/:id' do 
                         ^
app.rb:53:7: W: Lint/Void: Literal [201, { 'Location' => "responses/#{response.id}" }, 'UPDATED'] used in void context.
      [201, { 'Location' => "responses/#{response.id}" }, 'UPDATED']
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:59:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
app.rb:61:8: C: [Correctable] Style/ParenthesesAroundCondition: Don't use parentheses around the condition of an if.
    if (params[:choice_id].nil?)
       ^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:61:8: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
    if (params[:choice_id].nil?)
       ^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:63:7: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
      if (params[:incoming_question] == 'prev')
      ^^
app.rb:63:10: C: [Correctable] Style/ParenthesesAroundCondition: Don't use parentheses around the condition of an if.
      if (params[:incoming_question] == 'prev')
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:66:33: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around an interpolated expression.
      redirect to("/questions/#{(question.id)}?survey_id=#{params[:survey_id]}")
                                ^^^^^^^^^^^^^
app.rb:67:8: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    end 
       ^
app.rb:68:121: C: [Correctable] Layout/LineLength: Line is too long. [127/120]
    response = Response.create(question_id: params[:question_id], choice_id: params[:choice_id], survey_id: params[:survey_id])
                                                                                                                        ^^^^^^^
app.rb:70:7: W: Lint/Void: Literal [201, { 'Location' => "responses/#{response.id}" }, 'CREATED'] used in void context.
      [201, { 'Location' => "responses/#{response.id}" }, 'CREATED']
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:76:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
app.rb:79:8: C: [Correctable] Style/ParenthesesAroundCondition: Don't use parentheses around the condition of an if.
    if (@survey_count > 0)
       ^^^^^^^^^^^^^^^^^^^
app.rb:79:9: C: [Correctable] Style/NumericPredicate: Use @survey_count.positive? instead of @survey_count > 0.
    if (@survey_count > 0)
        ^^^^^^^^^^^^^^^^^
app.rb:84:10: C: [Correctable] Style/ParenthesesAroundCondition: Don't use parentheses around the condition of an if.
      if (!@bottom_date.nil? && !@top_date.nil? && !params[:selected_career].nil?)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:86:11: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
          :completed_at => @bottom_date .. @top_date,
          ^^^^^^^^^^^^^^^^
app.rb:86:28: C: [Correctable] Layout/SpaceInsideRangeLiteral: Space inside range literal.
          :completed_at => @bottom_date .. @top_date,
                           ^^^^^^^^^^^^^^^^^^^^^^^^^
app.rb:87:11: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
          :career_id => Career.find(:name => @selected_career).id
          ^^^^^^^^^^^^^
app.rb:87:37: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
          :career_id => Career.find(:name => @selected_career).id
                                    ^^^^^^^^
app.rb:97:27: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    @survey = Survey.find(:id => params[:survey_id])
                          ^^^^^^
app.rb:100:25: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    erb :finish_template 
                        ^
models/career.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Career.
class Career < Sequel::Model
^^^^^^^^^^^^
models/career.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Career < Sequel::Model
^
models/career.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    one_to_many :surveys
^^^^
models/career.rb:3:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    one_to_many :outcomes
^^^^
models/career.rb:4:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
models/career.rb:5:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def validate 
^^^^
models/career.rb:5:17: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    def validate 
                ^
models/career.rb:7:25: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
      errors.add(:name, :name => 'name can not be nil or empty') if name.nil? || name.empty?
                        ^^^^^^^^
models/career.rb:10:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def self.empty?
^^^^
models/career.rb:11:7: C: [Correctable] Style/RedundantReturn: Redundant return detected.
      return (Career.all.count == 0)
      ^^^^^^
models/career.rb:11:15: C: [Correctable] Style/NumericPredicate: Use Career.all.count.zero? instead of Career.all.count == 0.
      return (Career.all.count == 0)
              ^^^^^^^^^^^^^^^^^^^^^
models/career.rb:13:2: W: [Correctable] Layout/EndAlignment: end at 13, 1 is not aligned with class at 1, 0.
 end
 ^^^
models/career.rb:14:1: C: [Correctable] Layout/TrailingEmptyLines: 1 trailing blank lines detected.
models/career.rb:14:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
models/choice.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Choice.
class Choice < Sequel::Model
^^^^^^^^^^^^
models/choice.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Choice < Sequel::Model
^
models/choice.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    one_to_many :outcomes
^^^^
models/choice.rb:3:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    many_to_one :question
^^^^
models/choice.rb:4:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    one_to_one :response
^^^^
models/choice.rb:6:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    def validate 
^^^^
models/choice.rb:6:17: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    def validate 
                ^
models/choice.rb:7:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        super
    ^^^^
models/choice.rb:8:27: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
        errors.add(:text, :text => 'text can not be nil or empty') if text.nil? || text.empty?
                          ^^^^^^^^
models/choice.rb:11:1: C: [Correctable] Layout/TrailingEmptyLines: 1 trailing blank lines detected.
models/init.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require_relative 'post'
^
models/outcome.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Outcome.
class Outcome < Sequel::Model
^^^^^^^^^^^^^
models/outcome.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Outcome < Sequel::Model
^
models/outcome.rb:2:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
	many_to_one :career
^
models/outcome.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
	many_to_one :career
^
models/outcome.rb:3:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
	many_to_one :choice
^
models/outcome.rb:3:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
	many_to_one :choice
^
models/outcome.rb:4:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
models/outcome.rb:4:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
models/outcome.rb:5:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
	def validate
^
models/outcome.rb:5:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
	def validate
^
models/outcome.rb:6:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
		super
^^
models/outcome.rb:6:2: C: [Correctable] Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
		super
 ^
models/outcome.rb:7:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
		errors.add(:career_id, :name => 'career_id can not be nil') if (career_id.nil?) || (not (career_id) )
^^
models/outcome.rb:7:26: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
		errors.add(:career_id, :name => 'career_id can not be nil') if (career_id.nil?) || (not (career_id) )
                         ^^^^^^^^
models/outcome.rb:7:66: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
		errors.add(:career_id, :name => 'career_id can not be nil') if (career_id.nil?) || (not (career_id) )
                                                                 ^^^^^^^^^^^^^^^^
models/outcome.rb:7:87: C: [Correctable] Style/Not: Use ! instead of not.
		errors.add(:career_id, :name => 'career_id can not be nil') if (career_id.nil?) || (not (career_id) )
                                                                                      ^^^
models/outcome.rb:7:91: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
		errors.add(:career_id, :name => 'career_id can not be nil') if (career_id.nil?) || (not (career_id) )
                                                                                          ^^^^^^^^^^^
models/outcome.rb:7:102: C: [Correctable] Layout/SpaceInsideParens: Space inside parentheses detected.
		errors.add(:career_id, :name => 'career_id can not be nil') if (career_id.nil?) || (not (career_id) )
                                                                                                     ^
models/outcome.rb:8:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
		errors.add(:choice_id, :name => 'choice_id can not be nil') if (choice_id.nil?) || (not (choice_id) )
^^
models/outcome.rb:8:26: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
		errors.add(:choice_id, :name => 'choice_id can not be nil') if (choice_id.nil?) || (not (choice_id) )
                         ^^^^^^^^
models/outcome.rb:8:66: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
		errors.add(:choice_id, :name => 'choice_id can not be nil') if (choice_id.nil?) || (not (choice_id) )
                                                                 ^^^^^^^^^^^^^^^^
models/outcome.rb:8:87: C: [Correctable] Style/Not: Use ! instead of not.
		errors.add(:choice_id, :name => 'choice_id can not be nil') if (choice_id.nil?) || (not (choice_id) )
                                                                                      ^^^
models/outcome.rb:8:91: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
		errors.add(:choice_id, :name => 'choice_id can not be nil') if (choice_id.nil?) || (not (choice_id) )
                                                                                          ^^^^^^^^^^^
models/outcome.rb:8:102: C: [Correctable] Layout/SpaceInsideParens: Space inside parentheses detected.
		errors.add(:choice_id, :name => 'choice_id can not be nil') if (choice_id.nil?) || (not (choice_id) )
                                                                                                     ^
models/outcome.rb:9:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
	end
^
models/post.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Post < Sequel::Model
^
models/question.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require_relative 'util'
^
models/question.rb:3:1: C: Style/Documentation: Missing top-level documentation comment for class Question.
class Question < Sequel::Model
^^^^^^^^^^^^^^
models/question.rb:8:15: C: [Correctable] Style/RedundantSelf: Redundant self detected.
    next_id = self.id + 1
              ^^^^
models/question.rb:15:5: C: [Correctable] Style/RedundantReturn: Redundant return detected.
    return next_question
    ^^^^^^
models/question.rb:19:15: C: [Correctable] Style/RedundantSelf: Redundant self detected.
    prev_id = self.id - 1
              ^^^^
models/question.rb:26:5: C: [Correctable] Style/RedundantReturn: Redundant return detected.
    return prev_question
    ^^^^^^
models/question.rb:30:5: C: [Correctable] Style/RedundantReturn: Redundant return detected.
    return Response.find(survey_id: survey_id, question_id: self.id)
    ^^^^^^
models/question.rb:30:61: C: [Correctable] Style/RedundantSelf: Redundant self detected.
    return Response.find(survey_id: survey_id, question_id: self.id)
                                                            ^^^^
models/question.rb:34:5: C: [Correctable] Style/RedundantReturn: Redundant return detected.
    return self.get_response(survey_id).exist?
    ^^^^^^
models/question.rb:34:12: C: [Correctable] Style/RedundantSelf: Redundant self detected.
    return self.get_response(survey_id).exist?
           ^^^^
models/question.rb:38:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
  	if self.answered?(survey_id)
^^^
models/question.rb:38:3: C: [Correctable] Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
  	if self.answered?(survey_id)
  ^
models/question.rb:38:4: C: Style/GuardClause: Use a guard clause (return unless self.answered?(survey_id)) instead of wrapping the code inside a conditional expression.
  	if self.answered?(survey_id)
   ^^
models/question.rb:38:4: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
  	if self.answered?(survey_id)
   ^^
models/question.rb:38:7: C: [Correctable] Style/RedundantSelf: Redundant self detected.
  	if self.answered?(survey_id)
      ^^^^
models/question.rb:39:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
    	return Choice.find(id: self.get_response(survey_id).choice_id)
^^^^^
models/question.rb:39:6: C: [Correctable] Style/RedundantReturn: Redundant return detected.
    	return Choice.find(id: self.get_response(survey_id).choice_id)
     ^^^^^^
models/question.rb:39:29: C: [Correctable] Style/RedundantSelf: Redundant self detected.
    	return Choice.find(id: self.get_response(survey_id).choice_id)
                            ^^^^
models/question.rb:40:5: W: [Correctable] Layout/EndAlignment: end at 40, 4 is not aligned with if at 38, 3.
    end
    ^^^
models/question.rb:44:5: C: [Correctable] Style/RedundantReturn: Redundant return detected.
    return (self == Question.first)
    ^^^^^^
models/question.rb:48:5: C: [Correctable] Style/RedundantReturn: Redundant return detected.
    return (self == Question.last)
    ^^^^^^
models/question.rb:50:4: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
end 
   ^
models/response.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Response.
class Response < Sequel::Model
^^^^^^^^^^^^^^
models/response.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Response < Sequel::Model
^
models/response.rb:5:3: C: Metrics/AbcSize: Assignment Branch Condition size for validate is too high. [<0, 18, 6> 18.97/17]
  def validate ...
  ^^^^^^^^^^^^
models/response.rb:7:30: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    errors.add(:question_id, :name => 'question_id can not be nil') if (question_id.nil?) || (not (question_id))
                             ^^^^^^^^
models/response.rb:7:72: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
    errors.add(:question_id, :name => 'question_id can not be nil') if (question_id.nil?) || (not (question_id))
                                                                       ^^^^^^^^^^^^^^^^^^
models/response.rb:7:95: C: [Correctable] Style/Not: Use ! instead of not.
    errors.add(:question_id, :name => 'question_id can not be nil') if (question_id.nil?) || (not (question_id))
                                                                                              ^^^
models/response.rb:7:99: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
    errors.add(:question_id, :name => 'question_id can not be nil') if (question_id.nil?) || (not (question_id))
                                                                                                  ^^^^^^^^^^^^^
models/response.rb:8:30: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    errors.add(:choice_id,   :name => 'choice_id can not be nil')   if (choice_id.nil?) || (not (choice_id)) 
                             ^^^^^^^^
models/response.rb:8:72: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
    errors.add(:choice_id,   :name => 'choice_id can not be nil')   if (choice_id.nil?) || (not (choice_id)) 
                                                                       ^^^^^^^^^^^^^^^^
models/response.rb:8:93: C: [Correctable] Style/Not: Use ! instead of not.
    errors.add(:choice_id,   :name => 'choice_id can not be nil')   if (choice_id.nil?) || (not (choice_id)) 
                                                                                            ^^^
models/response.rb:8:97: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
    errors.add(:choice_id,   :name => 'choice_id can not be nil')   if (choice_id.nil?) || (not (choice_id)) 
                                                                                                ^^^^^^^^^^^
models/response.rb:8:109: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    errors.add(:choice_id,   :name => 'choice_id can not be nil')   if (choice_id.nil?) || (not (choice_id)) 
                                                                                                            ^
models/response.rb:9:30: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    errors.add(:survey_id,   :name => 'survey_id can not be nil')   if (survey_id.nil?) || (not (survey_id)) 
                             ^^^^^^^^
models/response.rb:9:72: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
    errors.add(:survey_id,   :name => 'survey_id can not be nil')   if (survey_id.nil?) || (not (survey_id)) 
                                                                       ^^^^^^^^^^^^^^^^
models/response.rb:9:93: C: [Correctable] Style/Not: Use ! instead of not.
    errors.add(:survey_id,   :name => 'survey_id can not be nil')   if (survey_id.nil?) || (not (survey_id)) 
                                                                                            ^^^
models/response.rb:9:97: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around a method call.
    errors.add(:survey_id,   :name => 'survey_id can not be nil')   if (survey_id.nil?) || (not (survey_id)) 
                                                                                                ^^^^^^^^^^^
models/response.rb:9:109: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
    errors.add(:survey_id,   :name => 'survey_id can not be nil')   if (survey_id.nil?) || (not (survey_id)) 
                                                                                                            ^
models/survey.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Survey.
class Survey < Sequel::Model
^^^^^^^^^^^^
models/survey.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Survey < Sequel::Model
^
models/survey.rb:2:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
	many_to_one :career
^
models/survey.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
	many_to_one :career
^
models/survey.rb:3:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
	one_to_many :responses
^
models/survey.rb:3:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
	one_to_many :responses
^
models/survey.rb:5:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
	def validate
^
models/survey.rb:5:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
	def validate
^
models/survey.rb:6:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
		super
^^
models/survey.rb:6:2: C: [Correctable] Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
		super
 ^
models/survey.rb:7:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
		errors.add(:username, :name => 'username can not be nil or empty') if username.nil? || username.empty?
^^
models/survey.rb:7:25: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
		errors.add(:username, :name => 'username can not be nil or empty') if username.nil? || username.empty?
                        ^^^^^^^^
models/survey.rb:8:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
	end
^
models/survey.rb:10:3: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
  def compute_result ...
  ^^^^^^^^^^^^^^^^^^
models/survey.rb:10:3: C: Metrics/AbcSize: Assignment Branch Condition size for compute_result is too high. [<6, 18, 3> 19.21/17]
  def compute_result ...
  ^^^^^^^^^^^^^^^^^^
models/survey.rb:11:21: C: [Correctable] Style/EmptyLiteral: Use hash literal {} instead of Hash.new.
    careers_count = Hash.new
                    ^^^^^^^^
models/survey.rb:14:5: C: [Correctable] Style/RedundantSelf: Redundant self detected.
    self.responses.each do |response|
    ^^^^
models/survey.rb:16:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
      	.outcomes.each { |outcome| careers_count[outcome.career_id] += 1 }
^^^^^^^
models/survey.rb:16:8: C: [Correctable] Layout/MultilineMethodCallIndentation: Align .outcomes with .find on line 15.
      	.outcomes.each { |outcome| careers_count[outcome.career_id] += 1 }
       ^^^^^^^^^
models/survey.rb:19:5: C: [Correctable] Style/RedundantSelf: Redundant self detected.
    self.update(
    ^^^^
models/survey.rb:20:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
    	career_id: careers_count.key(careers_count.values.max),
^^^^^
models/survey.rb:20:6: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
    	career_id: careers_count.key(careers_count.values.max), ...
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
models/survey.rb:21:1: C: [Correctable] Layout/IndentationStyle: Tab detected in indentation.
    	completed_at: Sequel.lit('NOW()')
^^^^^
models/survey.rb:22:5: C: [Correctable] Layout/ClosingParenthesisIndentation: Indent ) to column 3 (not 4)
    )
    ^
models/survey.rb:25:3: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
  def completed? ...
  ^^^^^^^^^^^^^^
models/survey.rb:26:5: C: [Correctable] Style/RedundantReturn: Redundant return detected.
    return self.career.exist?
    ^^^^^^
models/survey.rb:26:12: C: [Correctable] Style/RedundantSelf: Redundant self detected.
    return self.career.exist?
           ^^^^
models/survey.rb:29:3: C: [Correctable] Layout/IndentationConsistency: Inconsistent indentation detected.
  def self.count_completed ...
  ^^^^^^^^^^^^^^^^^^^^^^^^
models/survey.rb:32:5: C: [Correctable] Style/RedundantReturn: Redundant return detected.
    return count
    ^^^^^^
models/util.rb:1:1: C: Style/Documentation: Missing top-level documentation comment for class Object.
class Object
^^^^^^^^^^^^
models/util.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
class Object
^
models/util.rb:7:1: C: Metrics/MethodLength: Method has too many lines. [12/10]
def redirect_question(curr_question, requested_question, survey_id) ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
models/util.rb:16:3: C: [Correctable] Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
  if incoming_question.nil?
  ^^
models/util.rb:19:29: C: [Correctable] Style/RedundantParentheses: Don't use parentheses around an interpolated expression.
  redirect to("/questions/#{(incoming_question.id)}?survey_id=#{survey_id}")
                            ^^^^^^^^^^^^^^^^^^^^^^
tests/models/careers_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require File.expand_path '../../test_helper.rb', __FILE__
^
tests/models/careers_test.rb:1:14: C: [Correctable] Style/ExpandPathArguments: Use expand_path('../test_helper.rb', __dir__) instead of expand_path('../../test_helper.rb', __FILE__).
require File.expand_path '../../test_helper.rb', __FILE__
             ^^^^^^^^^^^
tests/models/careers_test.rb:3:1: C: Style/Documentation: Missing top-level documentation comment for class CareerTest.
class CareerTest < MiniTest::Unit::TestCase
^^^^^^^^^^^^^^^^
tests/models/careers_test.rb:4:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/models/careers_test.rb:5:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
tests/models/careers_test.rb:17:3: C: Metrics/MethodLength: Method has too many lines. [11/10]
  def test_career_must_has_name ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/models/careers_test.rb:34:1: C: [Correctable] Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
tests/models/choices_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require File.expand_path '../../test_helper.rb', __FILE__
^
tests/models/choices_test.rb:1:14: C: [Correctable] Style/ExpandPathArguments: Use expand_path('../test_helper.rb', __dir__) instead of expand_path('../../test_helper.rb', __FILE__).
require File.expand_path '../../test_helper.rb', __FILE__
             ^^^^^^^^^^^
tests/models/choices_test.rb:3:1: C: Style/Documentation: Missing top-level documentation comment for class ChoiceTest.
class ChoiceTest < MiniTest::Unit::TestCase
^^^^^^^^^^^^^^^^
tests/models/choices_test.rb:4:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/models/choices_test.rb:6:3: C: Metrics/MethodLength: Method has too many lines. [11/10]
  def test_choice_must_has_text ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/models/choices_test.rb:23:1: C: [Correctable] Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
tests/models/outcomes_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require File.expand_path '../../test_helper.rb', __FILE__
^
tests/models/outcomes_test.rb:1:14: C: [Correctable] Style/ExpandPathArguments: Use expand_path('../test_helper.rb', __dir__) instead of expand_path('../../test_helper.rb', __FILE__).
require File.expand_path '../../test_helper.rb', __FILE__
             ^^^^^^^^^^^
tests/models/outcomes_test.rb:3:1: C: Style/Documentation: Missing top-level documentation comment for class OutcomeTest.
class OutcomeTest < MiniTest::Unit::TestCase
^^^^^^^^^^^^^^^^^
tests/models/outcomes_test.rb:4:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/models/outcomes_test.rb:5:3: C: Metrics/AbcSize: Assignment Branch Condition size for test_outcome_must_has_career_and_choice is too high. [<9, 15, 0> 17.49/17]
  def test_outcome_must_has_career_and_choice ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/models/outcomes_test.rb:5:3: C: Metrics/MethodLength: Method has too many lines. [12/10]
  def test_outcome_must_has_career_and_choice ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/models/outcomes_test.rb:10:5: W: Lint/UselessAssignment: Useless assignment to variable - career.
    career = Career.create(:name => 'Tecnico Nuclear')
    ^^^^^^
tests/models/outcomes_test.rb:10:28: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    career = Career.create(:name => 'Tecnico Nuclear')
                           ^^^^^^^^
tests/models/outcomes_test.rb:11:5: W: Lint/UselessAssignment: Useless assignment to variable - choice.
    choice = Choice.create(:text => 'Venus del Nilo de jalea')
    ^^^^^^
tests/models/outcomes_test.rb:11:28: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    choice = Choice.create(:text => 'Venus del Nilo de jalea')
                           ^^^^^^^^
tests/models/questions_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require File.expand_path '../../test_helper.rb', __FILE__
^
tests/models/questions_test.rb:1:14: C: [Correctable] Style/ExpandPathArguments: Use expand_path('../test_helper.rb', __dir__) instead of expand_path('../../test_helper.rb', __FILE__).
require File.expand_path '../../test_helper.rb', __FILE__
             ^^^^^^^^^^^
tests/models/questions_test.rb:3:1: C: Style/Documentation: Missing top-level documentation comment for class QuestionTest.
class QuestionTest < MiniTest::Unit::TestCase
^^^^^^^^^^^^^^^^^^
tests/models/questions_test.rb:4:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/models/questions_test.rb:5:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
tests/models/questions_test.rb:17:1: C: [Correctable] Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
tests/models/responses_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require File.expand_path '../../test_helper.rb', __FILE__
^
tests/models/responses_test.rb:1:14: C: [Correctable] Style/ExpandPathArguments: Use expand_path('../test_helper.rb', __dir__) instead of expand_path('../../test_helper.rb', __FILE__).
require File.expand_path '../../test_helper.rb', __FILE__
             ^^^^^^^^^^^
tests/models/responses_test.rb:3:1: C: Style/Documentation: Missing top-level documentation comment for class ResponseTest.
class ResponseTest < MiniTest::Unit::TestCase
^^^^^^^^^^^^^^^^^^
tests/models/responses_test.rb:4:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/models/responses_test.rb:5:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
tests/models/responses_test.rb:6:3: C: Metrics/AbcSize: Assignment Branch Condition size for test_response_may_has_question_choice_and_survey is too high. [<16, 33, 0> 36.67/17]
  def test_response_may_has_question_choice_and_survey ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/models/responses_test.rb:6:3: C: Metrics/MethodLength: Method has too many lines. [20/10]
  def test_response_may_has_question_choice_and_survey ...
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/models/responses_test.rb:12:32: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    question = Question.create(:name => 'Question1', :description => 'description1', :number => 1)
                               ^^^^^^^^
tests/models/responses_test.rb:12:54: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    question = Question.create(:name => 'Question1', :description => 'description1', :number => 1)
                                                     ^^^^^^^^^^^^^^^
tests/models/responses_test.rb:12:86: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    question = Question.create(:name => 'Question1', :description => 'description1', :number => 1)
                                                                                     ^^^^^^^^^^
tests/models/responses_test.rb:13:28: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    choice = Choice.create(:text => 'choice1')
                           ^^^^^^^^
tests/models/responses_test.rb:14:28: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    survey = Survey.create(:username => "User1")
                           ^^^^^^^^^^^^
tests/models/responses_test.rb:14:41: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    survey = Survey.create(:username => "User1")
                                        ^^^^^^^
tests/models/responses_test.rb:18:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
tests/models/responses_test.rb:21:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
tests/models/responses_test.rb:24:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
tests/models/surveys_test.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
require File.expand_path '../../test_helper.rb', __FILE__
^
tests/models/surveys_test.rb:1:14: C: [Correctable] Style/ExpandPathArguments: Use expand_path('../test_helper.rb', __dir__) instead of expand_path('../../test_helper.rb', __FILE__).
require File.expand_path '../../test_helper.rb', __FILE__
             ^^^^^^^^^^^
tests/models/surveys_test.rb:3:1: C: Style/Documentation: Missing top-level documentation comment for class SurveyTest.
class SurveyTest < MiniTest::Unit::TestCase
^^^^^^^^^^^^^^^^
tests/models/surveys_test.rb:4:19: W: Lint/Void: Variable TestCase used in void context.
  MiniTest::Unit::TestCase
                  ^^^^^^^^
tests/test_helper.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
ENV['RACK_ENV'] = 'test'
^
tests/test_helper.rb:8:4: C: [Correctable] Layout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
   adapter: 'postgres', ...
   ^^^^^^^^^^^^^^^^^^^^
tests/test_helper.rb:12:21: C: [Correctable] Layout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
   password: 'magic')
                    ^
tests/test_helper.rb:13:1: C: Style/Documentation: Missing top-level documentation comment for class Minitest::HooksSpec.
class Minitest::HooksSpec
^^^^^^^^^^^^^^^^^^^^^^^^^
tests/test_helper.rb:13:7: C: [Correctable] Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
class Minitest::HooksSpec
      ^^^^^^^^^^^^^^^^^^^
tests/test_helper.rb:15:20: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    DB.transaction(:rollback=>:always, :auto_savepoint=>true){super}
                   ^^^^^^^^^^^
tests/test_helper.rb:15:29: C: [Correctable] Layout/SpaceAroundOperators: Surrounding space missing for operator =>.
    DB.transaction(:rollback=>:always, :auto_savepoint=>true){super}
                            ^^
tests/test_helper.rb:15:40: C: [Correctable] Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
    DB.transaction(:rollback=>:always, :auto_savepoint=>true){super}
                                       ^^^^^^^^^^^^^^^^^
tests/test_helper.rb:15:55: C: [Correctable] Layout/SpaceAroundOperators: Surrounding space missing for operator =>.
    DB.transaction(:rollback=>:always, :auto_savepoint=>true){super}
                                                      ^^
tests/test_helper.rb:15:62: C: [Correctable] Layout/SpaceBeforeBlockBraces: Space missing to the left of {.
    DB.transaction(:rollback=>:always, :auto_savepoint=>true){super}
                                                             ^
tests/test_helper.rb:15:63: C: [Correctable] Layout/SpaceInsideBlockBraces: Space missing inside {.
    DB.transaction(:rollback=>:always, :auto_savepoint=>true){super}
                                                              ^
tests/test_helper.rb:15:68: C: [Correctable] Layout/SpaceInsideBlockBraces: Space missing inside }.
    DB.transaction(:rollback=>:always, :auto_savepoint=>true){super}
                                                                   ^
db/clean_database.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
### Delete existing dataset ###
^
db/clean_database.rb:2:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Response.all.map { |r| r.destroy }
                 ^^^^^^^^^^^^^^^^^
db/clean_database.rb:3:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Survey.all.map   { |s| s.destroy }
                 ^^^^^^^^^^^^^^^^^
db/clean_database.rb:4:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Outcome.all.map  { |o| o.destroy }
                 ^^^^^^^^^^^^^^^^^
db/clean_database.rb:5:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Career.all.map   { |c| c.destroy }
                 ^^^^^^^^^^^^^^^^^
db/clean_database.rb:6:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Choice.all.map   { |c| c.destroy }
                 ^^^^^^^^^^^^^^^^^
db/clean_database.rb:7:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Question.all.map { |q| q.destroy }
                 ^^^^^^^^^^^^^^^^^
db/migrations/00001_create_posts_table.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00001_create_posts_table.rb:7:3: C: [Correctable] Layout/CommentIndentation: Incorrect indentation detected (column 2 instead of 6).
  #    DateTime      :updated_at,   default: Sequel::CURRENT_TIMESTAMP
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrations/00002_add_date_fields_to_posts.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00003_create_careers_table.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00003_create_careers_table.rb:15:1: C: [Correctable] Layout/TrailingEmptyLines: 1 trailing blank lines detected.
db/migrations/00004_create_questions_table.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00004_create_questions_table.rb:12:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
db/migrations/00004_create_questions_table.rb:16:3: C: [Correctable] Layout/BlockAlignment: end at 16, 2 is not aligned with Sequel.migration do at 1, 0.
  end
  ^^^
db/migrations/00004_create_questions_table.rb:17:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
db/migrations/00005_create_surveys_table.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00005_create_surveys_table.rb:11:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
db/migrations/00005_create_surveys_table.rb:15:3: C: [Correctable] Layout/BlockAlignment: end at 15, 2 is not aligned with Sequel.migration do at 1, 0.
  end
  ^^^
db/migrations/00005_create_surveys_table.rb:16:1: C: [Correctable] Layout/TrailingEmptyLines: 1 trailing blank lines detected.
db/migrations/00006_create_responses_table.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00006_create_responses_table.rb:11:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
db/migrations/00006_create_responses_table.rb:15:3: C: [Correctable] Layout/BlockAlignment: end at 15, 2 is not aligned with Sequel.migration do at 1, 0.
  end
  ^^^
db/migrations/00006_create_responses_table.rb:16:1: C: [Correctable] Layout/TrailingEmptyLines: 1 trailing blank lines detected.
db/migrations/00007_create_choices_table.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00007_create_choices_table.rb:10:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
db/migrations/00007_create_choices_table.rb:14:3: C: [Correctable] Layout/BlockAlignment: end at 14, 2 is not aligned with Sequel.migration do at 1, 0.
  end
  ^^^
db/migrations/00007_create_choices_table.rb:14:6: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
  end
     
db/migrations/00008_create_outcomes_table.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00008_create_outcomes_table.rb:11:1: C: [Correctable] Layout/TrailingWhitespace: Trailing whitespace detected.
db/migrations/00008_create_outcomes_table.rb:15:3: C: [Correctable] Layout/BlockAlignment: end at 15, 2 is not aligned with Sequel.migration do at 1, 0.
  end
  ^^^
db/migrations/00008_create_outcomes_table.rb:16:1: C: [Correctable] Layout/TrailingEmptyLines: 1 trailing blank lines detected.
db/migrations/00009_add_choice_to_question_association.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00009_add_choice_to_question_association.rb:2:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
db/migrations/00009_add_choice_to_question_association.rb:14:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
db/migrations/00010_add_response_to_choice_association.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00010_add_response_to_choice_association.rb:8:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
db/migrations/00010_add_response_to_choice_association.rb:9:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
db/migrations/00010_add_response_to_choice_association.rb:15:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
db/migrations/00011_add_ref_column_to_careers.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00011_add_ref_column_to_careers.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    up do
^^^^
db/migrations/00011_add_ref_column_to_careers.rb:3:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        alter_table :careers do
    ^^^^
db/migrations/00011_add_ref_column_to_careers.rb:4:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            add_column :ref, String
        ^^^^
db/migrations/00011_add_ref_column_to_careers.rb:9:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        alter_table :careers do
    ^^^^
db/migrations/00011_add_ref_column_to_careers.rb:10:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            drop_column :ref
        ^^^^
db/migrations/00011_add_ref_column_to_careers.rb:13:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
db/migrations/00012_add_index_to_surveys_usernames.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00012_add_index_to_surveys_usernames.rb:13:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
db/migrations/00013_add_unique_constraint_to_surveys_username.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00013_add_unique_constraint_to_surveys_username.rb:2:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
db/migrations/00013_add_unique_constraint_to_surveys_username.rb:14:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
db/migrations/00014_add_completed_at_column.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00014_add_completed_at_column.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    up do
^^^^
db/migrations/00014_add_completed_at_column.rb:3:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        alter_table :surveys do
    ^^^^
db/migrations/00014_add_completed_at_column.rb:4:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            add_column :completed_at, Date
        ^^^^
db/migrations/00014_add_completed_at_column.rb:9:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        alter_table :surveys do
    ^^^^
db/migrations/00014_add_completed_at_column.rb:10:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            drop_column :completed_at
        ^^^^
db/migrations/00014_add_completed_at_column.rb:13:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
db/migrations/00015_drop_updated_at_column.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
Sequel.migration do
^
db/migrations/00015_drop_updated_at_column.rb:2:1: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
    up do
^^^^
db/migrations/00015_drop_updated_at_column.rb:3:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        alter_table :surveys do
    ^^^^
db/migrations/00015_drop_updated_at_column.rb:4:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            drop_column :updated_at
        ^^^^
db/migrations/00015_drop_updated_at_column.rb:9:5: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
        alter_table :surveys do
    ^^^^
db/migrations/00015_drop_updated_at_column.rb:10:9: C: [Correctable] Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
            add_column :updated_at, DateTime
        ^^^^
db/migrations/00015_drop_updated_at_column.rb:13:1: C: [Correctable] Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
db/reset_surveys_data.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
### Delete existing responses and surveys ###
^
db/reset_surveys_data.rb:2:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Response.all.map { |r| r.destroy }
                 ^^^^^^^^^^^^^^^^^
db/reset_surveys_data.rb:3:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Survey.all.map   { |s| s.destroy }
                 ^^^^^^^^^^^^^^^^^
db/seeds.rb:1:1: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
### Delete existing dataset ###
^
db/seeds.rb:2:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Response.all.map { |r| r.destroy }
                 ^^^^^^^^^^^^^^^^^
db/seeds.rb:3:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Survey.all.map   { |s| s.destroy }
                 ^^^^^^^^^^^^^^^^^
db/seeds.rb:4:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Outcome.all.map  { |o| o.destroy }
                 ^^^^^^^^^^^^^^^^^
db/seeds.rb:5:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Career.all.map   { |c| c.destroy }
                 ^^^^^^^^^^^^^^^^^
db/seeds.rb:6:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Choice.all.map   { |c| c.destroy }
                 ^^^^^^^^^^^^^^^^^
db/seeds.rb:7:18: C: [Correctable] Style/SymbolProc: Pass &:destroy as an argument to map instead of a block.
Question.all.map { |q| q.destroy }
                 ^^^^^^^^^^^^^^^^^
db/seeds.rb:9:1: C: [Correctable] Layout/EmptyLines: Extra blank line detected.
db/seeds.rb:11:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
File.open("db/data/test1/questions.txt") do |file|
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:18:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
File.open("db/data/test1/choices.txt") do |file|
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:26:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
File.open("db/data/test1/careers.txt") do |file|
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/seeds.rb:33:11: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
File.open("db/data/test1/outcomes.txt") do |file|
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

35 files inspected, 296 offenses detected, 261 offenses auto-correctable
